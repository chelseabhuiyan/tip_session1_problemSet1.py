# PROBLEM 1
#Undertsand-
# We are given two list of integers as parameters. We are # # determining is the second list, sequence is a subsequence
# of the second list, lst. Meaning if the integers in the
# first  list is in the same order they appear on the 
# second list. In the example givem we can see that in the # second list, the numbers 1,6,-1,and  10 appear in that 
# order in the first list
# What happens when the list is empty?
# Does the time complexity of how you find out if they match matter? not really for this problem even though we 
# would want the fastest sort. 
#Match: this is a list problem

#Plan:
#  check if the value in the first index in list sequence 
#  is in lst
#  if true then check if value of second index in sequence # is in lst if thats true keep going or else return false
# if false return false

#Implement: 
def is_subsequence(lst, sequence):
  for i in range(len(sequence)):
    if (sequence[i] in lst):
      return True
    else:
      return False


#another way to do it 
def is_subsequence(lst, sequence):
  j = 0
  for i in range(len(lst)):
    if j < len(sequence) and lst[i] == sequence[j]:
      j += 1
  return j == len(sequence)

lst = [5, 1, 22, 25, 6, -1, 8, 10]
sequence = [1, 6, -1, 10]
print(is_subsequence(lst, sequence))

# PROBLEM 2
#Understand-
#The function create_dictionary takes two parameters of lists, keys and values
#retuns a dictionary where each item from the key list is paired with the corresponding item in values
# Assuming that both list are same size
#Assume that key [i] matched with value[i]

#Match: Creating Dictionary Problem

#Plan:
# take the string in the first list and put it with the first item in the second list 
# repeat while 0<=i<= len(keys)

#Implement:
def create_dictionary(keys, values):
  dictionary = {}
  for i in range(len(keys)):
      dictionary[keys[i]] = values[i]
  print(dictionary)

#another way
def create_dictionary(keys, values):
  dictionary = {keys[i]: values[i] for i in range(len(keys))}
  print(dictionary)

#another way The zip() function can be used to pair the elements of the two lists together, and the dict() function can convert these pairs into a dictionary.
def create_dictionary(keys, values):
  dictionary = dict(zip(keys, values))
  print(dictionary)

keys = ["peanut", "dragon", "star", "pop", "space"]
values = ["butter", "fly", "fish", "corn", "ship"]
create_dictionary(keys, values)
# PROBLEM 3
#Understand:
# The function takes a dictionary and a key called target as parameters. It looks for the key and when found prints the key and the value corresponding to it.
# it prints in this format "Key: <key>" followed by "Value: <value>"
#if key not in the dictioanry it prints "That pair does not exist!"

#Match: Accessing values in dictionary problem
#Plan:
# check each of the keys in the dictionary for the target. 
# if they are found return the key:target  and value:
# if not found then print "That pair does not exist!"

#Implement:
def print_pair(dictionary, target):
  if target in dictionary:
    print("Key:" + target) #print(f"Key: {target}")
    print("Value:"+ dictionary[target]) #print(f"Value: {dictionary[target]}")
  else:
    print("That pair does not exist!")


dictionary = {"spongebob": "squarepants", "patrick": "star", "squidward": "tentacles"}
print_pair(dictionary, "patrick")
print_pair(dictionary, "plankton")
print_pair(dictionary, "spongebob")
# PROBLEM 4
#Understand:
# The paramter is a dictionary whose key and values are integers. It find the sum of all the keys in dictionary and sum of all values in dictionary
# if the sum of key> sum of values return "keys"
# if sum of values > keys return "values"
# if sum is equal return "balanced"

#Match: Accessing keys value pair of dictionary and doing operation on them
#Plan:
# find sum_keys of all the keys in dictionary 
#find sum_values of all the values in dictionary 
#if sum_values=sum_keys print "balanced"
# elif sum_keys> sum_values print "keys"
#else: print"values"

#Implement: 
def keys_v_values(dictionary):
  keys = dictionary.keys() #extract all keys
  values= dictionary.values() #extract all values
  sum_keys= sum(keys) #sum of all keys
  sum_values= sum(values) #sum of all values
  if sum_values==sum_keys:
    return "balanced"
  elif sum_keys>sum_values:
    return "keys"
  else:
    return "values"

dictionary1 = {1:10, 2:20, 3:30, 4:40, 5:50, 6:60}
greater_sum = keys_v_values(dictionary1)
print(greater_sum)

dictionary2 = {100:10, 200:20, 300:30, 400:40, 500:50, 600:60}
greater_sum = keys_v_values(dictionary2)
print(greater_sum)

# PROBLEM 5
#Understand:
#function updates inventory dictionary and accepts two parameters. one is the current_inventory  where the key-value of  item and quanity of current stock in inventory 
# and another is restock_list. which is key-value pair of item and quanity needed to be added
#If item not in current_inventory list but is in restock_list it is added and fucntion returns the updated current_inventory list
# what if the item exists in current_inventory but the value is different is it still updated or added? add it to curent value

#Match:adding to dictionary 
#Plan:
# for each key in restock_list check if there is a key in current_inventory that matches
# if there isn't adding that key: value to the end of dictionary and return new current_inventory
# if key exists add the curent value to restocklist value and return updated new current_inventory

#Implemention:
def restock_inventory(current_inventory, restock_list):
    for item, quantity in restock_list.items():
      if item in current_inventory:
        current_inventory[item] += quantity
      else:
        current_inventory[item] = quantity
    return current_inventory

current_inventory = {
  "apples": 30,
  "bananas": 15,
  "oranges": 10
}

restock_list = {
  "oranges": 20,
  "apples": 10,
  "pears": 5
}

print("current_inventory:", restock_inventory(current_inventory, restock_list))
